<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on HexRx</title>
    <link>https://hexrx.github.io/tags/notes/</link>
    <description>Recent content in Notes on HexRx</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2023 HexRx</copyright>
    <lastBuildDate>Fri, 18 Oct 2024 21:25:46 +0300</lastBuildDate>
    <atom:link href="https://hexrx.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get DMA, PLL with 48 MHz, 4 KB RAM, and 32 KB flash memory for PY32F002Ax5 chips</title>
      <link>https://hexrx.github.io/posts/get-dma-pll-with-48mhz-4kb-ram-and-32kb-flash-memory-for-py32f002ax5-chips/</link>
      <pubDate>Fri, 18 Oct 2024 21:25:46 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/get-dma-pll-with-48mhz-4kb-ram-and-32kb-flash-memory-for-py32f002ax5-chips/</guid>
      <description>It seems that most Chinese chips PUYA PY32F002Ax5 have the core from PY32F030x6 chips inside, which gives undocumented features like DMA support, PLL with the ability to run chip on 48 MHz, additional timers like TIM3, and 4 KB RAM with 32 KB flash.&#xA;How to check if you PY32F002Ax5 has more memory There you have several options:&#xA;Build and flash this code to test RAM and flash https://github.com/IOsetting/py32f0-template/tree/main/Examples/PY32F0xx/HAL/Test/PY32F002A_32KF_4KR Create an empty 32kb binary file in your preferred hex editor (or use the online hex editor https://hexed.</description>
    </item>
    <item>
      <title>Ubuntu laptop &#43; Intel Wireless AC8262 wake up from suspend with bluetooth disabled</title>
      <link>https://hexrx.github.io/posts/ubuntu-laptop-intel-wireless-ac8262-wake-up-from-suspend-with-bluetooth-disabled/</link>
      <pubDate>Thu, 10 Oct 2024 15:31:48 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/ubuntu-laptop-intel-wireless-ac8262-wake-up-from-suspend-with-bluetooth-disabled/</guid>
      <description>Sometimes after waking up form suspend mode, on a laptop with Ubuntu 22.04 (I don&amp;rsquo;t think that Ubuntu version matters) and adapter Intel Dual Band Wireless-AC 8265, bluetooth is disabled in the system and you can&amp;rsquo;t get it work back without restart your laptop.&#xA;The same problem was discussed here https://askubuntu.com/questions/1036195/bluetooth-doesnt-work-after-resuming-from-sleep-ubuntu-18-04-lts&#xA;The solution is to reload bluetooth module in the system by command sudo modprobe -r btusb &amp;amp;&amp;amp; sleep 5 &amp;amp;&amp;amp; sudo modprobe btusb</description>
    </item>
    <item>
      <title>PY32F002 pyOCD STLink error (22): DP error</title>
      <link>https://hexrx.github.io/posts/py32f002-pyocd-stlink-dp-error/</link>
      <pubDate>Mon, 23 Sep 2024 23:19:03 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/py32f002-pyocd-stlink-dp-error/</guid>
      <description>After run the command to upload firmware to chip PY32F002AA15M6TU pyocd load app.hex -t PY32F002Ax5&#xA;I got the error 0004908 C STLink error (22): DP error [__main__]&#xA;But if you try to read firmware, it works fine pyocd&amp;gt; savemem 0x08000000 20480 py32f002.bin&#xA;BTW pyOCD and ST-Link V2 work well with the PY32F003xx series.&#xA;The solution is to use CMSIS-DAP based programmer instead of ST-Link V2, but instead of buying a new one you can use STM32 Blue Pill board without adding any extra components, just upload the firmware https://github.</description>
    </item>
    <item>
      <title>Convert multiple images to WebP</title>
      <link>https://hexrx.github.io/posts/convert-multiple-images-to-webp/</link>
      <pubDate>Tue, 20 Aug 2024 12:17:01 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/convert-multiple-images-to-webp/</guid>
      <description>Download and unpack WebP tools (it includes the cwebp cli utility that requires to converting images to WebP) https://developers.google.com/speed/webp/docs/precompiled&#xA;Set PATH to bin folder where the archive was unpacked export PATH=$PATH:~/libwebp-1.4.0-linux-x86-64/bin&#xA;Execute in a folder with JPEG images for x in ./*.jpg; do cwebp ${x} -o ${x/jpg/webp}; done</description>
    </item>
    <item>
      <title>Embedded font libraries font code size comparison</title>
      <link>https://hexrx.github.io/posts/embedded-font-libraries-font-code-size-comparision/</link>
      <pubDate>Tue, 13 Aug 2024 21:13:40 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/embedded-font-libraries-font-code-size-comparision/</guid>
      <description>Only ASCII characters 0x20-0x7e&#xA;The below table shows sizes in bytes&#xA;Font Roboto 12 px Roboto 24 px Roboto 48 px Roboto 72 px Adafruit_GFX/TFT_eSPI (1 bpp) 3832 14589 56677 129389 u8g2 (1 bpp) 1508 3039 6632 N/A mcu-renderer 1 bpp 1473 2891 5902 9511 mcu-renderer 2 bpp 2052 4162 8743 13969 mcu-renderer 3 bpp 2695 5677 12128 18701 mcu-renderer 4 bpp 3328 7329 15533 23676 MCUFont (4 bpp) 3125 6296 12969 20045 TFT_eSPI (vlw) 7642 19387 65833 143333 Source: https://github.</description>
    </item>
    <item>
      <title>Unlocking Ebyte E104-BT5005A module using pyOCD</title>
      <link>https://hexrx.github.io/posts/unlocking-ebyte-e104-bt5005a-module-using-pyocd/</link>
      <pubDate>Wed, 07 Aug 2024 19:17:58 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/unlocking-ebyte-e104-bt5005a-module-using-pyocd/</guid>
      <description>Unlocking module using pyOCD The Ebyte E104-BT5005A module uses nRF52805 as a chip and can be easily unlocked for flashing new firmware by pyOCD command: pyocd cmd --target nrf52805_xxaa -O auto_unlock</description>
    </item>
    <item>
      <title>AWS EC2 sysbench test for t3.medium and t4g.medium</title>
      <link>https://hexrx.github.io/posts/aws-ec2-sysbench-test-for-t3.medium-and-t4g.medium/</link>
      <pubDate>Sun, 23 Apr 2023 23:39:22 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/aws-ec2-sysbench-test-for-t3.medium-and-t4g.medium/</guid>
      <description>Sysbench test was run on two types of AWS EC2 instances t3.medium (x86-64) and t4g.medium (ARM). The command was executed with the parameters sysbench --test=cpu run.&#xA;t3.medium: sysbench 1.0.18 (using system LuaJIT 2.1.0-beta3) Running the test with following options: Number of threads: 1 Initializing random number generator from current time Prime numbers limit: 10000 Initializing worker threads... Threads started! CPU speed: events per second: 984.07 General statistics: total time: 10.0008s total number of events: 9843 Latency (ms): min: 0.</description>
    </item>
    <item>
      <title>AWS EC2 lscpu for t3.small, t2.medium, t3a.xlarge, m5zn.3xlarge, and c6a.large</title>
      <link>https://hexrx.github.io/posts/aws-ec2-lscpu-for-t3small-t2medium-t3axlarge-m5zn3xlarge-c6alarge/</link>
      <pubDate>Sat, 22 Apr 2023 23:52:21 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/aws-ec2-lscpu-for-t3small-t2medium-t3axlarge-m5zn3xlarge-c6alarge/</guid>
      <description>Below is the output of the lscpu (CPU details) command for the AWS EC2 instances with types: t3.small, t2.medium, t3a.xlarge, m5zn.3xlarge, and c6a.large.&#xA;t3.small lscpu output: Architecture: x86_64 CPU op-mode(s): 32-bit, 64-bit Byte Order: Little Endian Address sizes: 46 bits physical, 48 bits virtual CPU(s): 2 On-line CPU(s) list: 0,1 Thread(s) per core: 2 Core(s) per socket: 1 Socket(s): 1 NUMA node(s): 1 Vendor ID: GenuineIntel CPU family: 6 Model: 85 Model name: Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.</description>
    </item>
    <item>
      <title>How to download Google Chrome extension from Chrome Web Store as a zip archive</title>
      <link>https://hexrx.github.io/posts/how-to-download-google-chrome-extension-from-chrome-web-store-as-a-zip-archive/</link>
      <pubDate>Sun, 16 Apr 2023 13:28:30 +0300</pubDate>
      <guid>https://hexrx.github.io/posts/how-to-download-google-chrome-extension-from-chrome-web-store-as-a-zip-archive/</guid>
      <description>How to download Google Chrome extension Google Chrome extension can be downloaded from the below link by changing the entire string {EXTENSION_ID}, including curly brackets, to the extension id that you need: https://clients2.google.com/service/update2/crx?response=redirect&amp;amp;prodversion=110.0.0.0&amp;amp;x=id%3D{EXTENSION_ID}%26installsource%3Dondemand%26uc&amp;amp;nacl_arch=x86-64&amp;amp;acceptformat=crx2,crx3&#xA;This link will download the *.crx file, which should be renamed to *.zip.&#xA;You can get the extension id from the extension page in the Chrome Web Store.&#xA;Example For example, you want to download Google Translate extension, this extension has the link https://chrome.</description>
    </item>
  </channel>
</rss>
